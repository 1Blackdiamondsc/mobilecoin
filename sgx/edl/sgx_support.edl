// Copyright (c) 2018-2020 MobileCoin Inc.

enclave {
    /// Note: Must be kept in sync with definition in sgx_backtrace/src/lib.rs
    struct Frame {
        uint8_t* exact_position;
        uint8_t* symbol_addr;
        uint32_t inline_context;
    };

    untrusted {
        /* Define OCALLs here.
           Note: OCALL should generally be avoided, c.f. Yogesh
           https://www.blackhat.com/docs/us-17/thursday/us-17-Swami-SGX-Remote-Attestation-Is-Not-Sufficient-wp.pdf

           Especially, OCALLS that don't return void. c.f. Iago attacks
           https://hovav.net/ucsd/dist/iago.pdf

           We use it here to report panic messages because
           (1) that's basically what rust-sgx-sdk does
           (2) we don't see a better alternative right now
           (3) the enclave should not generally panic, we should do proper
               error handling and the ecall should result in an error
           (4) (chris) I guess I'm no longer convinced that any of these void
               ocalls with no returned data are actually sources of
               vulnerabilities, if you see otherwise please explain
         */

        // sgx_panic
        void report_panic_message([in, size=msg_len] const uint8_t* msg,
                                  size_t msg_len);

        // sgx_backtrace
        void report_backtrace([in, count=enclave_path_len] const uint8_t* enclave_path,
                              size_t enclave_path_len,
                              [in, count=num_frames] const Frame* frames,
                              size_t num_frames);

        // sgx_debug
        void eprintln_message([in, size=msg_len] const uint8_t* msg,
                              size_t msg_len);
    };
};
